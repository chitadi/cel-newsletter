# Google Cloud Build configuration
# Handles both harvest (daily) and newsletter (Tue/Thu/Sat)
# cloudbuild.yaml (minimal: setup + cleanup)

steps:
  # 1) Setup: only workspace prep (LFS + DB)
  - name: 'python:3.10'
    id: 'setup'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🚀 Starting pipeline..."
        echo "=== INITIAL STATE ==="
        echo "Current branch:"
        git branch
        echo "Current directory:"
        pwd
        echo "Files in workspace:"
        ls -la
        echo "Git status:"
        git status
        echo "Untracked files specifically:"
        git ls-files --others --exclude-standard
        echo "===================="

        apt-get update -y && apt-get install -y git-lfs

        git remote set-url origin "https://oauth2:$$_GITHUB_TOKEN@github.com/$$_GITHUB_REPO.git"
        git lfs install --force

        # Ensure both branches exist locally and are up to date
        git fetch --prune origin +refs/heads/*:refs/remotes/origin/*

        # Pull DB from data, then place it in working tree on main
        git checkout -B data refs/remotes/origin/data
        git lfs pull --include="newsletter.db"
        cp newsletter.db /tmp/newsletter.db
        git checkout -B main refs/remotes/origin/main
        cp /tmp/newsletter.db newsletter.db
        ls -lh newsletter.db

        echo "Setup complete ✅"
    secretEnv: ['_GITHUB_TOKEN', '_GITHUB_REPO']

  # 3) Harvest (trigger: _TRIGGER_TYPE=harvest)
  - name: 'python:3.10'
    id: 'harvest'
    entrypoint: 'bash'
    env:
      - 'PYTHONPATH=/workspace'
      - 'PLAYWRIGHT_BROWSERS_PATH=/usr/bin'  # Force Playwright to use system browsers
    args:
      - '-c'
      - |
        if [ "$_TRIGGER_TYPE" != "harvest" ]; then
          echo "⏭️ Skipping harvest"; exit 0
        fi

        # Export the secret as a regular environment variable for Python
        export YOUTUBE_API_KEY="$$_YOUTUBE_API_KEY"
        
        # Debug: Check if the key is being set (shows length, not the actual key)
        echo "YOUTUBE_API_KEY length: ${#YOUTUBE_API_KEY}"

        apt-get update -y && apt-get install -y git-lfs wget gnupg unzip

        # Install Chrome for Selenium
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
        # Replace your current Chrome installation block with this complete one:
        apt-get update && apt-get install -y google-chrome-stable \
        libnss3 libnspr4 libdbus-1-3 libatk1.0-0 libatk-bridge2.0-0 \
        libcups2 libdrm2 libxkbcommon0 libatspi2.0-0 libxcomposite1 \
        libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2 \
        fonts-liberation libxss1 libgtk-3-0 libxcb1 libxcb-dri3-0 \
        libx11-xcb1 libxcb-xkb1 libxcb-xfixes0 libxcb-icccm4 \
        libxcb-image0 libxcb-shm0 libxcb-util1 libxcb-keysyms1 \
        libxcb-randr0 libxcb-shape0 libxcb-sync1 libxcb-xfixes0 \
        libxcb-xinerama0 libxcb-xkb1 libxcb1-dev libx11-dev    

        git lfs install
        git config --global user.email "bot@github.com"
        git config --global user.name "Newsletter Bot"
        git config --global --add safe.directory /workspace

        python -m pip install --upgrade pip
        pip install -r requirements.txt

        echo "🎭 Installing Playwright..."
        playwright install chromium --with-deps
        echo "✅ Playwright ready"

        # if [ ! -f newsletter.db ]; then
        python -m src.init_db
        # fi

        python -m src.articles.run_harvest
        python -m src.youtube.youtube_scraper

        cp newsletter.db /tmp/newsletter_updated.db
        rm -f newsletter.db

        git fetch origin data
        git checkout data
        git pull --ff-only origin data
        git lfs install

        cp /tmp/newsletter_updated.db newsletter.db
        git add newsletter.db || true
        git commit -m "Daily harvest $(date --iso-8601=seconds)" || echo "No changes"

        git remote remove push-tmp 2>/dev/null || true
        git remote add push-tmp "https://oauth2:$$_GITHUB_TOKEN@github.com/$$_GITHUB_REPO.git"
        git push push-tmp data

        echo "✅ Harvest complete!"
    secretEnv: ['_GITHUB_TOKEN', '_GITHUB_REPO', '_YOUTUBE_API_KEY']

    # Newsletter step - Following the working harvest pattern
  - name: 'python:3.10'
    id: 'newsletter'
    entrypoint: 'bash'
    env:
      - 'PYTHONPATH=/workspace'
      - 'PLAYWRIGHT_BROWSERS_PATH=/usr/bin'  # Force Playwright to use system browsers
      - 'SMTP_HOST=smtp.gmail.com'
      - 'SMTP_PORT=587'
    args:
      - '-c'
      - |
        if [ "$_TRIGGER_TYPE" != "newsletter" ]; then
          echo "⏭️ Skipping newsletter"; exit 0
        fi

        # Export environment variables (using same pattern as harvest)
        export OPENROUTER_API_KEY="$$_OPENROUTER_API_KEY"
        export YOUTUBE_API_KEY="$$_YOUTUBE_API_KEY"  
        export SMTP_USER="$$_SMTP_USER"
        export SMTP_PASS="$$_SMTP_PASS"

        # Setup (same as harvest step)
        apt-get update -y && apt-get install -y git-lfs tor wget gnupg unzip

        # Install Chrome for Selenium
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list
        apt-get update && apt-get install -y google-chrome-stable \
        libnss3 libnspr4 libdbus-1-3 libatk1.0-0 libatk-bridge2.0-0 \
        libcups2 libdrm2 libxkbcommon0 libatspi2.0-0 libxcomposite1 \
        libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2 \
        fonts-liberation libxss1 libgtk-3-0 libxcb1 libxcb-dri3-0 \
        libx11-xcb1 libxcb-xkb1 libxcb-xfixes0 libxcb-icccm4 \
        libxcb-image0 libxcb-shm0 libxcb-util1 libxcb-keysyms1 \
        libxcb-randr0 libxcb-shape0 libxcb-sync1 libxcb-xfixes0 \
        libxcb-xinerama0 libxcb-xkb1 libxcb1-dev libx11-dev

        git lfs install
        git config --global user.email "bot@github.com"
        git config --global user.name "Newsletter Bot"
        git config --global --add safe.directory /workspace

        # Install Python dependencies
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -U yt-dlp

        # Get fresh database from data branch (same logic as harvest)
        rm -f newsletter.db || true
        git fetch origin data
        git checkout data
        git lfs pull --include="newsletter.db"
        cp newsletter.db /tmp/newsletter.db
        git checkout main
        cp /tmp/newsletter.db newsletter.db
        ls -lh newsletter.db

        # Initialize database
        python -m src.init_db

        # Set up YouTube cookies
        echo "$$_YT_COOKIES_B64" | base64 --decode > cookies.txt
        export YT_COOKIE_FILE="$(pwd)/cookies.txt"

        # Start Tor
        echo 'ControlPort 9051' >> /etc/tor/torrc
        service tor start
        sleep 12

        # Run full newsletter pipeline
        python -m src.articles.embed_articles
        python -m src.articles.rank
        python -m src.articles.summarise
        python -m src.youtube.embed_videos
        python -m src.youtube.youtube_rank
        python -m src.youtube.youtube_summarise
        python -m src.render_newsletter
        python -m src.smtp_mailer
        python -m src.housekeeping

        echo "📊 Database after housekeeping:"
        ls -lh newsletter.db

        # Save database back to data branch (same pattern as harvest)
        cp newsletter.db /tmp/newsletter_cleared.db
        rm -f newsletter.db

        git fetch origin data
        git checkout data
        git pull --ff-only origin data
        git lfs install
        cp /tmp/newsletter_cleared.db newsletter.db

        git add newsletter.db || true
        git commit -m "Cleared DB after newsletter $(date --iso-8601=seconds)" || true

        git remote remove push-tmp 2>/dev/null || true
        git remote add push-tmp "https://oauth2:$$_GITHUB_TOKEN@github.com/$$_GITHUB_REPO.git"
        git push push-tmp data

        echo "✅ Newsletter complete and DB cleared!"
    secretEnv: ['_GITHUB_TOKEN', '_GITHUB_REPO', '_YT_COOKIES_B64', '_OPENROUTER_API_KEY', '_YOUTUBE_API_KEY', '_SMTP_USER', '_SMTP_PASS']

# Secrets
availableSecrets:
  secretManager:
    - versionName: projects/${PROJECT_ID}/secrets/github-token/versions/latest
      env: '_GITHUB_TOKEN'
    - versionName: projects/${PROJECT_ID}/secrets/github-repo/versions/latest
      env: '_GITHUB_REPO'
    - versionName: projects/${PROJECT_ID}/secrets/YT_COOKIES_MIN_B64/versions/latest
      env: '_YT_COOKIES_B64'
    - versionName: projects/${PROJECT_ID}/secrets/OPENROUTER_API_KEY/versions/latest
      env: '_OPENROUTER_API_KEY'
    - versionName: projects/${PROJECT_ID}/secrets/YOUTUBE_API_KEY/versions/latest
      env: '_YOUTUBE_API_KEY'
    - versionName: projects/${PROJECT_ID}/secrets/SMTP_USER/versions/latest
      env: '_SMTP_USER'
    - versionName: projects/${PROJECT_ID}/secrets/SMTP_PASS/versions/latest
      env: '_SMTP_PASS'

options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  logging: CLOUD_LOGGING_ONLY
  volumes:
    - name: pip-cache
      path: /root/.cache/pip

timeout: 3600s
