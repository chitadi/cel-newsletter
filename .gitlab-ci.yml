image: python:3.10

stages:          # run harvest first so newsletter sees fresh DB
  - harvest
  - newsletter

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

before_script:
  - python -m pip install --upgrade pip
  - pip install -r requirements.txt
  - git lfs install --skip-smudge    # pull pointers only
  - git fetch origin data
  - git checkout origin/data -- newsletter.db || true

cache:
  paths:
    - .cache/pip

.harvest_common: &harvest_setup
  stage: harvest
  script:
    - |
      if [ ! -f newsletter.db ]; then
        python -m src.init_db
      fi
    - python -m src.articles.run_harvest
    - python -m src.youtube.youtube_scraper
    - |
      git config user.name  "Newsletter Bot"
      git config user.email "bot@example.com"
      git checkout -B data
      git add newsletter.db
      git commit -m "Update DB on $(date --iso-8601=seconds)" || echo "No changes"
      git push https://${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git data

harvest_daily:
  <<: *harvest_setup
  rules:
  # Scheduled pipelines
  - if: '$CI_PIPELINE_SOURCE == "schedule"'
    when: always

  # Manual "Run pipeline" button or API trigger
  - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"'
    when: manual        # shows play ▶ button so you decide per run

  # Fallback
  - when: never

.newsletter_common: &newsletter_setup
  stage: newsletter
  script:
    - |
      if [ ! -f newsletter.db ]; then
        python -m src.init_db
      fi
    - echo "$YT_COOKIES_B64" | base64 --decode > cookies.txt
    - apt-get update -y && apt-get install -y tor
      && echo 'ControlPort 9051' >> /etc/tor/torrc
      && service tor start
      && sleep 12
    - |
      git fetch origin data
      git checkout origin/data -- newsletter.db
      python -m src.articles.embed_articles
      python -m src.articles.rank
      python -m src.articles.summarise
      python -m src.youtube.embed_videos
      python -m src.youtube.youtube_rank
      python -m src.youtube.youtube_summarise
      python -m src.render_newsletter
      python -m src.smtp_mailer
      python -m src.housekeeping

newsletter_run:
  <<: *newsletter_setup
  rules:
  # Scheduled pipelines
  - if: '$CI_PIPELINE_SOURCE == "schedule"'
    when: always

  # Manual "Run pipeline" button or API trigger
  - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"'
    when: manual        # shows play ▶ button so you decide per run

  # Fallback
  - when: never